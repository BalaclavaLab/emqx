%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.10.0
-module(emqx_gpb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_ConnectedMessage.ConnAck'/1, 'enum_value_by_symbol_ConnectedMessage.ConnAck'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("emqx_gpb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'ConnectedMessage.ConnAck'() :: 'CONNACK_ACCEPT' | 'CONNACK_PROTO_VER' | 'CONNACK_INVALID_ID' | 'CONNACK_SERVER' | 'CONNACK_CREDENTIALS' | 'CONNACK_AUTH'.
-export_type(['ConnectedMessage.ConnAck'/0]).

%% message types
-type 'EmqxPresence'() :: #'EmqxPresence'{}.

-type 'ConnectedMessage'() :: #'ConnectedMessage'{}.

-type 'DisconnectedMessage'() :: #'DisconnectedMessage'{}.

-type 'EmqxMessage'() :: #'EmqxMessage'{}.

-export_type(['EmqxPresence'/0, 'ConnectedMessage'/0, 'DisconnectedMessage'/0, 'EmqxMessage'/0]).

-spec encode_msg(#'EmqxPresence'{} | #'ConnectedMessage'{} | #'DisconnectedMessage'{} | #'EmqxMessage'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'EmqxPresence'{} | #'ConnectedMessage'{} | #'DisconnectedMessage'{} | #'EmqxMessage'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'EmqxPresence'{} | #'ConnectedMessage'{} | #'DisconnectedMessage'{} | #'EmqxMessage'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'EmqxPresence' ->
            encode_msg_EmqxPresence(id(Msg, TrUserData),
                TrUserData);
        'ConnectedMessage' ->
            encode_msg_ConnectedMessage(id(Msg, TrUserData),
                TrUserData);
        'DisconnectedMessage' ->
            encode_msg_DisconnectedMessage(id(Msg, TrUserData),
                TrUserData);
        'EmqxMessage' ->
            encode_msg_EmqxMessage(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_EmqxPresence(Msg, TrUserData) ->
    encode_msg_EmqxPresence(Msg, <<>>, TrUserData).


encode_msg_EmqxPresence(#'EmqxPresence'{username = F1,
    client_id = F2, time = F3,
    presence = F4},
    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
             true ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                 end
         end,
    B2 = if F2 == undefined -> B1;
             true ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                 end
         end,
    B3 = if F3 == undefined -> B2;
             true ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
                 end
         end,
    if F4 =:= undefined -> B3;
        true ->
            case id(F4, TrUserData) of
                {connected_message, TF4} ->
                    begin
                        TrTF4 = id(TF4, TrUserData),
                        e_mfield_EmqxPresence_connected_message(TrTF4,
                            <<B3/binary, 34>>,
                            TrUserData)
                    end;
                {disconnected_message, TF4} ->
                    begin
                        TrTF4 = id(TF4, TrUserData),
                        e_mfield_EmqxPresence_disconnected_message(TrTF4,
                            <<B3/binary, 42>>,
                            TrUserData)
                    end
            end
    end.

encode_msg_ConnectedMessage(Msg, TrUserData) ->
    encode_msg_ConnectedMessage(Msg, <<>>, TrUserData).


encode_msg_ConnectedMessage(#'ConnectedMessage'{ip_address
= F1,
    conn_ack = F2, session = F3,
    protocol_version = F4},
    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
             true ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                 end
         end,
    B2 = if F2 == undefined -> B1;
             true ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     'e_enum_ConnectedMessage.ConnAck'(TrF2,
                         <<B1/binary, 16>>,
                         TrUserData)
                 end
         end,
    B3 = if F3 == undefined -> B2;
             true ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
                 end
         end,
    if F4 == undefined -> B3;
        true ->
            begin
                TrF4 = id(F4, TrUserData),
                e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
            end
    end.

encode_msg_DisconnectedMessage(Msg, TrUserData) ->
    encode_msg_DisconnectedMessage(Msg, <<>>, TrUserData).


encode_msg_DisconnectedMessage(#'DisconnectedMessage'{reason
= F1},
    Bin, TrUserData) ->
    if F1 == undefined -> Bin;
        true ->
            begin
                TrF1 = id(F1, TrUserData),
                e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
            end
    end.

encode_msg_EmqxMessage(Msg, TrUserData) ->
    encode_msg_EmqxMessage(Msg, <<>>, TrUserData).


encode_msg_EmqxMessage(#'EmqxMessage'{username = F1,
    client_id = F2, topic = F3, qos = F4,
    retain = F5, dup = F6, id = F7,
    payload = F8},
    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
             true ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                 end
         end,
    B2 = if F2 == undefined -> B1;
             true ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                 end
         end,
    B3 = if F3 == undefined -> B2;
             true ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                 end
         end,
    B4 = if F4 == undefined -> B3;
             true ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
                 end
         end,
    B5 = if F5 == undefined -> B4;
             true ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
                 end
         end,
    B6 = if F6 == undefined -> B5;
             true ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     e_type_bool(TrF6, <<B5/binary, 48>>, TrUserData)
                 end
         end,
    B7 = if F7 == undefined -> B6;
             true ->
                 begin
                     TrF7 = id(F7, TrUserData),
                     e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
                 end
         end,
    if F8 == undefined -> B7;
        true ->
            begin
                TrF8 = id(F8, TrUserData),
                e_type_bytes(TrF8, <<B7/binary, 66>>, TrUserData)
            end
    end.

e_mfield_EmqxPresence_connected_message(Msg, Bin,
    TrUserData) ->
    SubBin = encode_msg_ConnectedMessage(Msg, <<>>,
        TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_EmqxPresence_disconnected_message(Msg, Bin,
    TrUserData) ->
    SubBin = encode_msg_DisconnectedMessage(Msg, <<>>,
        TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_ConnectedMessage.ConnAck'('CONNACK_ACCEPT', Bin,
    _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_PROTO_VER',
    Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_INVALID_ID',
    Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_SERVER', Bin,
    _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_CREDENTIALS',
    Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_AUTH', Bin,
    _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_ConnectedMessage.ConnAck'(V, Bin,
    _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('EmqxPresence', Bin, TrUserData) ->
    id(decode_msg_EmqxPresence(Bin, TrUserData),
        TrUserData);
decode_msg_2_doit('ConnectedMessage', Bin,
    TrUserData) ->
    id(decode_msg_ConnectedMessage(Bin, TrUserData),
        TrUserData);
decode_msg_2_doit('DisconnectedMessage', Bin,
    TrUserData) ->
    id(decode_msg_DisconnectedMessage(Bin, TrUserData),
        TrUserData);
decode_msg_2_doit('EmqxMessage', Bin, TrUserData) ->
    id(decode_msg_EmqxMessage(Bin, TrUserData), TrUserData).



decode_msg_EmqxPresence(Bin, TrUserData) ->
    dfp_read_field_def_EmqxPresence(Bin, 0, 0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData), TrUserData).

dfp_read_field_def_EmqxPresence(<<10, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_EmqxPresence_username(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, TrUserData);
dfp_read_field_def_EmqxPresence(<<18, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_EmqxPresence_client_id(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, TrUserData);
dfp_read_field_def_EmqxPresence(<<24, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_EmqxPresence_time(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, TrUserData);
dfp_read_field_def_EmqxPresence(<<34, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_EmqxPresence_connected_message(Rest, Z1, Z2,
        F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_EmqxPresence(<<42, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_EmqxPresence_disconnected_message(Rest, Z1, Z2,
        F@_1, F@_2, F@_3, F@_4,
        TrUserData);
dfp_read_field_def_EmqxPresence(<<>>, 0, 0, F@_1, F@_2,
    F@_3, F@_4, _) ->
    #'EmqxPresence'{username = F@_1, client_id = F@_2,
        time = F@_3, presence = F@_4};
dfp_read_field_def_EmqxPresence(Other, Z1, Z2, F@_1,
    F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_EmqxPresence(Other, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_EmqxPresence(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EmqxPresence(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
        TrUserData);
dg_read_field_def_EmqxPresence(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_EmqxPresence_username(Rest, 0, 0, F@_1, F@_2,
                F@_3, F@_4, TrUserData);
        18 ->
            d_field_EmqxPresence_client_id(Rest, 0, 0, F@_1, F@_2,
                F@_3, F@_4, TrUserData);
        24 ->
            d_field_EmqxPresence_time(Rest, 0, 0, F@_1, F@_2, F@_3,
                F@_4, TrUserData);
        34 ->
            d_field_EmqxPresence_connected_message(Rest, 0, 0, F@_1,
                F@_2, F@_3, F@_4, TrUserData);
        42 ->
            d_field_EmqxPresence_disconnected_message(Rest, 0, 0,
                F@_1, F@_2, F@_3, F@_4,
                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_EmqxPresence(Rest, 0, 0, F@_1, F@_2, F@_3,
                        F@_4, TrUserData);
                1 ->
                    skip_64_EmqxPresence(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
                        TrUserData);
                2 ->
                    skip_length_delimited_EmqxPresence(Rest, 0, 0, F@_1,
                        F@_2, F@_3, F@_4,
                        TrUserData);
                3 ->
                    skip_group_EmqxPresence(Rest, Key bsr 3, 0, F@_1, F@_2,
                        F@_3, F@_4, TrUserData);
                5 ->
                    skip_32_EmqxPresence(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
                        TrUserData)
            end
    end;
dg_read_field_def_EmqxPresence(<<>>, 0, 0, F@_1, F@_2,
    F@_3, F@_4, _) ->
    #'EmqxPresence'{username = F@_1, client_id = F@_2,
        time = F@_3, presence = F@_4}.

d_field_EmqxPresence_username(<<1:1, X:7, Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_EmqxPresence_username(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
        TrUserData);
d_field_EmqxPresence_username(<<0:1, X:7, Rest/binary>>,
    N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                                 Rest2}
                         end,
    dfp_read_field_def_EmqxPresence(RestF, 0, 0, NewFValue,
        F@_2, F@_3, F@_4, TrUserData).

d_field_EmqxPresence_client_id(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_EmqxPresence_client_id(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
        TrUserData);
d_field_EmqxPresence_client_id(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                                 Rest2}
                         end,
    dfp_read_field_def_EmqxPresence(RestF, 0, 0, F@_1,
        NewFValue, F@_3, F@_4, TrUserData).

d_field_EmqxPresence_time(<<1:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_EmqxPresence_time(Rest, N + 7, X bsl N + Acc,
        F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_EmqxPresence_time(<<0:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:64/signed-native>> = <<(X bsl N +
                                  Acc):64/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
        Rest},
    dfp_read_field_def_EmqxPresence(RestF, 0, 0, F@_1, F@_2,
        NewFValue, F@_4, TrUserData).

d_field_EmqxPresence_connected_message(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4,
    TrUserData)
    when N < 57 ->
    d_field_EmqxPresence_connected_message(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3,
        F@_4, TrUserData);
d_field_EmqxPresence_connected_message(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, Prev,
    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_ConnectedMessage(Bs, TrUserData),
                                 TrUserData),
                                 Rest2}
                         end,
    dfp_read_field_def_EmqxPresence(RestF, 0, 0, F@_1, F@_2,
        F@_3,
        case Prev of
            undefined ->
                id({connected_message, NewFValue},
                    TrUserData);
            {connected_message, MVPrev} ->
                id({connected_message,
                    merge_msg_ConnectedMessage(MVPrev,
                        NewFValue,
                        TrUserData)},
                    TrUserData);
            _ ->
                id({connected_message, NewFValue},
                    TrUserData)
        end,
        TrUserData).

d_field_EmqxPresence_disconnected_message(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4,
    TrUserData)
    when N < 57 ->
    d_field_EmqxPresence_disconnected_message(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3,
        F@_4, TrUserData);
d_field_EmqxPresence_disconnected_message(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, Prev,
    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_DisconnectedMessage(Bs, TrUserData),
                                 TrUserData),
                                 Rest2}
                         end,
    dfp_read_field_def_EmqxPresence(RestF, 0, 0, F@_1, F@_2,
        F@_3,
        case Prev of
            undefined ->
                id({disconnected_message, NewFValue},
                    TrUserData);
            {disconnected_message, MVPrev} ->
                id({disconnected_message,
                    merge_msg_DisconnectedMessage(MVPrev,
                        NewFValue,
                        TrUserData)},
                    TrUserData);
            _ ->
                id({disconnected_message, NewFValue},
                    TrUserData)
        end,
        TrUserData).

skip_varint_EmqxPresence(<<1:1, _:7, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_EmqxPresence(Rest, Z1, Z2, F@_1, F@_2, F@_3,
        F@_4, TrUserData);
skip_varint_EmqxPresence(<<0:1, _:7, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_EmqxPresence(Rest, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_EmqxPresence(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_EmqxPresence(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
        TrUserData);
skip_length_delimited_EmqxPresence(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4,
    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EmqxPresence(Rest2, 0, 0, F@_1, F@_2,
        F@_3, F@_4, TrUserData).

skip_group_EmqxPresence(Bin, FNum, Z2, F@_1, F@_2, F@_3,
    F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EmqxPresence(Rest, 0, Z2, F@_1, F@_2,
        F@_3, F@_4, TrUserData).

skip_32_EmqxPresence(<<_:32, Rest/binary>>, Z1, Z2,
    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_EmqxPresence(Rest, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

skip_64_EmqxPresence(<<_:64, Rest/binary>>, Z1, Z2,
    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_EmqxPresence(Rest, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

decode_msg_ConnectedMessage(Bin, TrUserData) ->
    dfp_read_field_def_ConnectedMessage(Bin, 0, 0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ConnectedMessage(<<10, Rest/binary>>,
    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
    TrUserData) ->
    d_field_ConnectedMessage_ip_address(Rest, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ConnectedMessage(<<16, Rest/binary>>,
    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
    TrUserData) ->
    d_field_ConnectedMessage_conn_ack(Rest, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ConnectedMessage(<<24, Rest/binary>>,
    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
    TrUserData) ->
    d_field_ConnectedMessage_session(Rest, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ConnectedMessage(<<32, Rest/binary>>,
    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
    TrUserData) ->
    d_field_ConnectedMessage_protocol_version(Rest, Z1, Z2,
        F@_1, F@_2, F@_3, F@_4,
        TrUserData);
dfp_read_field_def_ConnectedMessage(<<>>, 0, 0, F@_1,
    F@_2, F@_3, F@_4, _) ->
    #'ConnectedMessage'{ip_address = F@_1, conn_ack = F@_2,
        session = F@_3, protocol_version = F@_4};
dfp_read_field_def_ConnectedMessage(Other, Z1, Z2, F@_1,
    F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_ConnectedMessage(Other, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_ConnectedMessage(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ConnectedMessage(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
        TrUserData);
dg_read_field_def_ConnectedMessage(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4,
    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_ConnectedMessage_ip_address(Rest, 0, 0, F@_1,
                F@_2, F@_3, F@_4, TrUserData);
        16 ->
            d_field_ConnectedMessage_conn_ack(Rest, 0, 0, F@_1,
                F@_2, F@_3, F@_4, TrUserData);
        24 ->
            d_field_ConnectedMessage_session(Rest, 0, 0, F@_1, F@_2,
                F@_3, F@_4, TrUserData);
        32 ->
            d_field_ConnectedMessage_protocol_version(Rest, 0, 0,
                F@_1, F@_2, F@_3, F@_4,
                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_ConnectedMessage(Rest, 0, 0, F@_1, F@_2,
                        F@_3, F@_4, TrUserData);
                1 ->
                    skip_64_ConnectedMessage(Rest, 0, 0, F@_1, F@_2, F@_3,
                        F@_4, TrUserData);
                2 ->
                    skip_length_delimited_ConnectedMessage(Rest, 0, 0, F@_1,
                        F@_2, F@_3, F@_4,
                        TrUserData);
                3 ->
                    skip_group_ConnectedMessage(Rest, Key bsr 3, 0, F@_1,
                        F@_2, F@_3, F@_4, TrUserData);
                5 ->
                    skip_32_ConnectedMessage(Rest, 0, 0, F@_1, F@_2, F@_3,
                        F@_4, TrUserData)
            end
    end;
dg_read_field_def_ConnectedMessage(<<>>, 0, 0, F@_1,
    F@_2, F@_3, F@_4, _) ->
    #'ConnectedMessage'{ip_address = F@_1, conn_ack = F@_2,
        session = F@_3, protocol_version = F@_4}.

d_field_ConnectedMessage_ip_address(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ConnectedMessage_ip_address(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
        TrUserData);
d_field_ConnectedMessage_ip_address(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                                 Rest2}
                         end,
    dfp_read_field_def_ConnectedMessage(RestF, 0, 0,
        NewFValue, F@_2, F@_3, F@_4,
        TrUserData).

d_field_ConnectedMessage_conn_ack(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ConnectedMessage_conn_ack(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
        TrUserData);
d_field_ConnectedMessage_conn_ack(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_ConnectedMessage.ConnAck'(begin
                                                  <<Res:32/signed-native>> = <<(X
                                                      bsl
                                                      N
                                                      +
                                                      Acc):32/unsigned-native>>,
                                                  id(Res, TrUserData)
                                              end),
            TrUserData),
            Rest},
    dfp_read_field_def_ConnectedMessage(RestF, 0, 0, F@_1,
        NewFValue, F@_3, F@_4, TrUserData).

d_field_ConnectedMessage_session(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ConnectedMessage_session(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
        TrUserData);
d_field_ConnectedMessage_session(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
        TrUserData),
        Rest},
    dfp_read_field_def_ConnectedMessage(RestF, 0, 0, F@_1,
        F@_2, NewFValue, F@_4, TrUserData).

d_field_ConnectedMessage_protocol_version(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4,
    TrUserData)
    when N < 57 ->
    d_field_ConnectedMessage_protocol_version(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3,
        F@_4, TrUserData);
d_field_ConnectedMessage_protocol_version(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, _,
    TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                  Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
        Rest},
    dfp_read_field_def_ConnectedMessage(RestF, 0, 0, F@_1,
        F@_2, F@_3, NewFValue, TrUserData).

skip_varint_ConnectedMessage(<<1:1, _:7, Rest/binary>>,
    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_ConnectedMessage(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, TrUserData);
skip_varint_ConnectedMessage(<<0:1, _:7, Rest/binary>>,
    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ConnectedMessage(Rest, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_ConnectedMessage(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4,
    TrUserData)
    when N < 57 ->
    skip_length_delimited_ConnectedMessage(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3,
        F@_4, TrUserData);
skip_length_delimited_ConnectedMessage(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4,
    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConnectedMessage(Rest2, 0, 0, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

skip_group_ConnectedMessage(Bin, FNum, Z2, F@_1, F@_2,
    F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ConnectedMessage(Rest, 0, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

skip_32_ConnectedMessage(<<_:32, Rest/binary>>, Z1, Z2,
    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ConnectedMessage(Rest, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

skip_64_ConnectedMessage(<<_:64, Rest/binary>>, Z1, Z2,
    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ConnectedMessage(Rest, Z1, Z2, F@_1,
        F@_2, F@_3, F@_4, TrUserData).

decode_msg_DisconnectedMessage(Bin, TrUserData) ->
    dfp_read_field_def_DisconnectedMessage(Bin, 0, 0,
        id(undefined, TrUserData),
        TrUserData).

dfp_read_field_def_DisconnectedMessage(<<10,
    Rest/binary>>,
    Z1, Z2, F@_1, TrUserData) ->
    d_field_DisconnectedMessage_reason(Rest, Z1, Z2, F@_1,
        TrUserData);
dfp_read_field_def_DisconnectedMessage(<<>>, 0, 0, F@_1,
    _) ->
    #'DisconnectedMessage'{reason = F@_1};
dfp_read_field_def_DisconnectedMessage(Other, Z1, Z2,
    F@_1, TrUserData) ->
    dg_read_field_def_DisconnectedMessage(Other, Z1, Z2,
        F@_1, TrUserData).

dg_read_field_def_DisconnectedMessage(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisconnectedMessage(Rest, N + 7,
        X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_DisconnectedMessage(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_DisconnectedMessage_reason(Rest, 0, 0, F@_1,
                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_DisconnectedMessage(Rest, 0, 0, F@_1,
                        TrUserData);
                1 ->
                    skip_64_DisconnectedMessage(Rest, 0, 0, F@_1,
                        TrUserData);
                2 ->
                    skip_length_delimited_DisconnectedMessage(Rest, 0, 0,
                        F@_1, TrUserData);
                3 ->
                    skip_group_DisconnectedMessage(Rest, Key bsr 3, 0, F@_1,
                        TrUserData);
                5 ->
                    skip_32_DisconnectedMessage(Rest, 0, 0, F@_1,
                        TrUserData)
            end
    end;
dg_read_field_def_DisconnectedMessage(<<>>, 0, 0, F@_1,
    _) ->
    #'DisconnectedMessage'{reason = F@_1}.

d_field_DisconnectedMessage_reason(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_DisconnectedMessage_reason(Rest, N + 7,
        X bsl N + Acc, F@_1, TrUserData);
d_field_DisconnectedMessage_reason(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                                 Rest2}
                         end,
    dfp_read_field_def_DisconnectedMessage(RestF, 0, 0,
        NewFValue, TrUserData).

skip_varint_DisconnectedMessage(<<1:1, _:7,
    Rest/binary>>,
    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_DisconnectedMessage(Rest, Z1, Z2, F@_1,
        TrUserData);
skip_varint_DisconnectedMessage(<<0:1, _:7,
    Rest/binary>>,
    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DisconnectedMessage(Rest, Z1, Z2,
        F@_1, TrUserData).

skip_length_delimited_DisconnectedMessage(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DisconnectedMessage(Rest, N + 7,
        X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_DisconnectedMessage(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisconnectedMessage(Rest2, 0, 0,
        F@_1, TrUserData).

skip_group_DisconnectedMessage(Bin, FNum, Z2, F@_1,
    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DisconnectedMessage(Rest, 0, Z2,
        F@_1, TrUserData).

skip_32_DisconnectedMessage(<<_:32, Rest/binary>>, Z1,
    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DisconnectedMessage(Rest, Z1, Z2,
        F@_1, TrUserData).

skip_64_DisconnectedMessage(<<_:64, Rest/binary>>, Z1,
    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DisconnectedMessage(Rest, Z1, Z2,
        F@_1, TrUserData).

decode_msg_EmqxMessage(Bin, TrUserData) ->
    dfp_read_field_def_EmqxMessage(Bin, 0, 0,
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData),
        id(undefined, TrUserData), TrUserData).

dfp_read_field_def_EmqxMessage(<<10, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    d_field_EmqxMessage_username(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData);
dfp_read_field_def_EmqxMessage(<<18, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    d_field_EmqxMessage_client_id(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData);
dfp_read_field_def_EmqxMessage(<<26, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    d_field_EmqxMessage_topic(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_EmqxMessage(<<32, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    d_field_EmqxMessage_qos(Rest, Z1, Z2, F@_1, F@_2, F@_3,
        F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_EmqxMessage(<<40, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    d_field_EmqxMessage_retain(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_EmqxMessage(<<48, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    d_field_EmqxMessage_dup(Rest, Z1, Z2, F@_1, F@_2, F@_3,
        F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_EmqxMessage(<<56, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    d_field_EmqxMessage_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
        F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_EmqxMessage(<<66, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    d_field_EmqxMessage_payload(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_EmqxMessage(<<>>, 0, 0, F@_1, F@_2,
    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _) ->
    #'EmqxMessage'{username = F@_1, client_id = F@_2,
        topic = F@_3, qos = F@_4, retain = F@_5, dup = F@_6,
        id = F@_7, payload = F@_8};
dfp_read_field_def_EmqxMessage(Other, Z1, Z2, F@_1,
    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
    TrUserData) ->
    dg_read_field_def_EmqxMessage(Other, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData).

dg_read_field_def_EmqxMessage(<<1:1, X:7, Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EmqxMessage(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
        F@_6, F@_7, F@_8, TrUserData);
dg_read_field_def_EmqxMessage(<<0:1, X:7, Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_EmqxMessage_username(Rest, 0, 0, F@_1, F@_2,
                F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                TrUserData);
        18 ->
            d_field_EmqxMessage_client_id(Rest, 0, 0, F@_1, F@_2,
                F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                TrUserData);
        26 ->
            d_field_EmqxMessage_topic(Rest, 0, 0, F@_1, F@_2, F@_3,
                F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        32 ->
            d_field_EmqxMessage_qos(Rest, 0, 0, F@_1, F@_2, F@_3,
                F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        40 ->
            d_field_EmqxMessage_retain(Rest, 0, 0, F@_1, F@_2, F@_3,
                F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        48 ->
            d_field_EmqxMessage_dup(Rest, 0, 0, F@_1, F@_2, F@_3,
                F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        56 ->
            d_field_EmqxMessage_id(Rest, 0, 0, F@_1, F@_2, F@_3,
                F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
        66 ->
            d_field_EmqxMessage_payload(Rest, 0, 0, F@_1, F@_2,
                F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_EmqxMessage(Rest, 0, 0, F@_1, F@_2, F@_3,
                        F@_4, F@_5, F@_6, F@_7, F@_8,
                        TrUserData);
                1 ->
                    skip_64_EmqxMessage(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
                        F@_5, F@_6, F@_7, F@_8, TrUserData);
                2 ->
                    skip_length_delimited_EmqxMessage(Rest, 0, 0, F@_1,
                        F@_2, F@_3, F@_4, F@_5, F@_6,
                        F@_7, F@_8, TrUserData);
                3 ->
                    skip_group_EmqxMessage(Rest, Key bsr 3, 0, F@_1, F@_2,
                        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                        TrUserData);
                5 ->
                    skip_32_EmqxMessage(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
                        F@_5, F@_6, F@_7, F@_8, TrUserData)
            end
    end;
dg_read_field_def_EmqxMessage(<<>>, 0, 0, F@_1, F@_2,
    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _) ->
    #'EmqxMessage'{username = F@_1, client_id = F@_2,
        topic = F@_3, qos = F@_4, retain = F@_5, dup = F@_6,
        id = F@_7, payload = F@_8}.

d_field_EmqxMessage_username(<<1:1, X:7, Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData)
    when N < 57 ->
    d_field_EmqxMessage_username(Rest, N + 7, X bsl N + Acc,
        F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData);
d_field_EmqxMessage_username(<<0:1, X:7, Rest/binary>>,
    N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                                 Rest2}
                         end,
    dfp_read_field_def_EmqxMessage(RestF, 0, 0, NewFValue,
        F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData).

d_field_EmqxMessage_client_id(<<1:1, X:7, Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData)
    when N < 57 ->
    d_field_EmqxMessage_client_id(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
        F@_6, F@_7, F@_8, TrUserData);
d_field_EmqxMessage_client_id(<<0:1, X:7, Rest/binary>>,
    N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                                 Rest2}
                         end,
    dfp_read_field_def_EmqxMessage(RestF, 0, 0, F@_1,
        NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
        F@_8, TrUserData).

d_field_EmqxMessage_topic(<<1:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
    TrUserData)
    when N < 57 ->
    d_field_EmqxMessage_topic(Rest, N + 7, X bsl N + Acc,
        F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData);
d_field_EmqxMessage_topic(<<0:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                                 Rest2}
                         end,
    dfp_read_field_def_EmqxMessage(RestF, 0, 0, F@_1, F@_2,
        NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData).

d_field_EmqxMessage_qos(<<1:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
    TrUserData)
    when N < 57 ->
    d_field_EmqxMessage_qos(Rest, N + 7, X bsl N + Acc,
        F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData);
d_field_EmqxMessage_qos(<<0:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
    TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                  Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
        Rest},
    dfp_read_field_def_EmqxMessage(RestF, 0, 0, F@_1, F@_2,
        F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
        TrUserData).

d_field_EmqxMessage_retain(<<1:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
    TrUserData)
    when N < 57 ->
    d_field_EmqxMessage_retain(Rest, N + 7, X bsl N + Acc,
        F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData);
d_field_EmqxMessage_retain(<<0:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8,
    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
        TrUserData),
        Rest},
    dfp_read_field_def_EmqxMessage(RestF, 0, 0, F@_1, F@_2,
        F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8,
        TrUserData).

d_field_EmqxMessage_dup(<<1:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
    TrUserData)
    when N < 57 ->
    d_field_EmqxMessage_dup(Rest, N + 7, X bsl N + Acc,
        F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData);
d_field_EmqxMessage_dup(<<0:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
        TrUserData),
        Rest},
    dfp_read_field_def_EmqxMessage(RestF, 0, 0, F@_1, F@_2,
        F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
        TrUserData).

d_field_EmqxMessage_id(<<1:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
    TrUserData)
    when N < 57 ->
    d_field_EmqxMessage_id(Rest, N + 7, X bsl N + Acc, F@_1,
        F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData);
d_field_EmqxMessage_id(<<0:1, X:7, Rest/binary>>, N,
    Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
    TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                  Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
        Rest},
    dfp_read_field_def_EmqxMessage(RestF, 0, 0, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8,
        TrUserData).

d_field_EmqxMessage_payload(<<1:1, X:7, Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
    F@_8, TrUserData)
    when N < 57 ->
    d_field_EmqxMessage_payload(Rest, N + 7, X bsl N + Acc,
        F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData);
d_field_EmqxMessage_payload(<<0:1, X:7, Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_EmqxMessage(RestF, 0, 0, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue,
        TrUserData).

skip_varint_EmqxMessage(<<1:1, _:7, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
    TrUserData) ->
    skip_varint_EmqxMessage(Rest, Z1, Z2, F@_1, F@_2, F@_3,
        F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_varint_EmqxMessage(<<0:1, _:7, Rest/binary>>, Z1,
    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
    TrUserData) ->
    dfp_read_field_def_EmqxMessage(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData).

skip_length_delimited_EmqxMessage(<<1:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
    F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_EmqxMessage(Rest, N + 7,
        X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
        F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_length_delimited_EmqxMessage(<<0:1, X:7,
    Rest/binary>>,
    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
    F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EmqxMessage(Rest2, 0, 0, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData).

skip_group_EmqxMessage(Bin, FNum, Z2, F@_1, F@_2, F@_3,
    F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EmqxMessage(Rest, 0, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData).

skip_32_EmqxMessage(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_EmqxMessage(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData).

skip_64_EmqxMessage(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_EmqxMessage(Rest, Z1, Z2, F@_1, F@_2,
        F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
        TrUserData).

'd_enum_ConnectedMessage.ConnAck'(0) ->
    'CONNACK_ACCEPT';
'd_enum_ConnectedMessage.ConnAck'(1) ->
    'CONNACK_PROTO_VER';
'd_enum_ConnectedMessage.ConnAck'(2) ->
    'CONNACK_INVALID_ID';
'd_enum_ConnectedMessage.ConnAck'(3) ->
    'CONNACK_SERVER';
'd_enum_ConnectedMessage.ConnAck'(4) ->
    'CONNACK_CREDENTIALS';
'd_enum_ConnectedMessage.ConnAck'(5) -> 'CONNACK_AUTH';
'd_enum_ConnectedMessage.ConnAck'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
    when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
    FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
    when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
    when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
    is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'EmqxPresence' ->
            merge_msg_EmqxPresence(Prev, New, TrUserData);
        'ConnectedMessage' ->
            merge_msg_ConnectedMessage(Prev, New, TrUserData);
        'DisconnectedMessage' ->
            merge_msg_DisconnectedMessage(Prev, New, TrUserData);
        'EmqxMessage' ->
            merge_msg_EmqxMessage(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_EmqxPresence/3}).
merge_msg_EmqxPresence(#'EmqxPresence'{username =
PFusername,
    client_id = PFclient_id, time = PFtime,
    presence = PFpresence},
    #'EmqxPresence'{username = NFusername,
        client_id = NFclient_id, time = NFtime,
        presence = NFpresence},
    TrUserData) ->
    #'EmqxPresence'{username =
    if NFusername =:= undefined -> PFusername;
        true -> NFusername
    end,
        client_id =
        if NFclient_id =:= undefined -> PFclient_id;
            true -> NFclient_id
        end,
        time =
        if NFtime =:= undefined -> PFtime;
            true -> NFtime
        end,
        presence =
        case {PFpresence, NFpresence} of
            {{connected_message, OPFpresence},
                {connected_message, ONFpresence}} ->
                {connected_message,
                    merge_msg_ConnectedMessage(OPFpresence,
                        ONFpresence,
                        TrUserData)};
            {{disconnected_message, OPFpresence},
                {disconnected_message, ONFpresence}} ->
                {disconnected_message,
                    merge_msg_DisconnectedMessage(OPFpresence,
                        ONFpresence,
                        TrUserData)};
            {_, undefined} -> PFpresence;
            _ -> NFpresence
        end}.

-compile({nowarn_unused_function,merge_msg_ConnectedMessage/3}).
merge_msg_ConnectedMessage(#'ConnectedMessage'{ip_address
= PFip_address,
    conn_ack = PFconn_ack,
    session = PFsession,
    protocol_version =
    PFprotocol_version},
    #'ConnectedMessage'{ip_address = NFip_address,
        conn_ack = NFconn_ack,
        session = NFsession,
        protocol_version =
        NFprotocol_version},
    _) ->
    #'ConnectedMessage'{ip_address =
    if NFip_address =:= undefined -> PFip_address;
        true -> NFip_address
    end,
        conn_ack =
        if NFconn_ack =:= undefined -> PFconn_ack;
            true -> NFconn_ack
        end,
        session =
        if NFsession =:= undefined -> PFsession;
            true -> NFsession
        end,
        protocol_version =
        if NFprotocol_version =:= undefined ->
            PFprotocol_version;
            true -> NFprotocol_version
        end}.

-compile({nowarn_unused_function,merge_msg_DisconnectedMessage/3}).
merge_msg_DisconnectedMessage(#'DisconnectedMessage'{reason
= PFreason},
    #'DisconnectedMessage'{reason = NFreason}, _) ->
    #'DisconnectedMessage'{reason =
    if NFreason =:= undefined -> PFreason;
        true -> NFreason
    end}.

-compile({nowarn_unused_function,merge_msg_EmqxMessage/3}).
merge_msg_EmqxMessage(#'EmqxMessage'{username =
PFusername,
    client_id = PFclient_id, topic = PFtopic,
    qos = PFqos, retain = PFretain,
    dup = PFdup, id = PFid,
    payload = PFpayload},
    #'EmqxMessage'{username = NFusername,
        client_id = NFclient_id, topic = NFtopic,
        qos = NFqos, retain = NFretain,
        dup = NFdup, id = NFid,
        payload = NFpayload},
    _) ->
    #'EmqxMessage'{username =
    if NFusername =:= undefined -> PFusername;
        true -> NFusername
    end,
        client_id =
        if NFclient_id =:= undefined -> PFclient_id;
            true -> NFclient_id
        end,
        topic =
        if NFtopic =:= undefined -> PFtopic;
            true -> NFtopic
        end,
        qos =
        if NFqos =:= undefined -> PFqos;
            true -> NFqos
        end,
        retain =
        if NFretain =:= undefined -> PFretain;
            true -> NFretain
        end,
        dup =
        if NFdup =:= undefined -> PFdup;
            true -> NFdup
        end,
        id =
        if NFid =:= undefined -> PFid;
            true -> NFid
        end,
        payload =
        if NFpayload =:= undefined -> PFpayload;
            true -> NFpayload
        end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'EmqxPresence' ->
            v_msg_EmqxPresence(Msg, [MsgName], TrUserData);
        'ConnectedMessage' ->
            v_msg_ConnectedMessage(Msg, [MsgName], TrUserData);
        'DisconnectedMessage' ->
            v_msg_DisconnectedMessage(Msg, [MsgName], TrUserData);
        'EmqxMessage' ->
            v_msg_EmqxMessage(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_EmqxPresence/3}).
-dialyzer({nowarn_function,v_msg_EmqxPresence/3}).
v_msg_EmqxPresence(#'EmqxPresence'{username = F1,
    client_id = F2, time = F3, presence = F4},
    Path, TrUserData) ->
    if F1 == undefined -> ok;
        true -> v_type_string(F1, [username | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
        true ->
            v_type_string(F2, [client_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
        true -> v_type_int64(F3, [time | Path], TrUserData)
    end,
    case F4 of
        undefined -> ok;
        {connected_message, OF4} ->
            v_msg_ConnectedMessage(OF4,
                [connected_message, presence | Path],
                TrUserData);
        {disconnected_message, OF4} ->
            v_msg_DisconnectedMessage(OF4,
                [disconnected_message, presence | Path],
                TrUserData);
        _ -> mk_type_error(invalid_oneof, F4, [presence | Path])
    end,
    ok;
v_msg_EmqxPresence(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EmqxPresence'}, X, Path).

-compile({nowarn_unused_function,v_msg_ConnectedMessage/3}).
-dialyzer({nowarn_function,v_msg_ConnectedMessage/3}).
v_msg_ConnectedMessage(#'ConnectedMessage'{ip_address =
F1,
    conn_ack = F2, session = F3,
    protocol_version = F4},
    Path, TrUserData) ->
    if F1 == undefined -> ok;
        true ->
            v_type_string(F1, [ip_address | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
        true ->
            'v_enum_ConnectedMessage.ConnAck'(F2, [conn_ack | Path],
                TrUserData)
    end,
    if F3 == undefined -> ok;
        true -> v_type_bool(F3, [session | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
        true ->
            v_type_int32(F4, [protocol_version | Path], TrUserData)
    end,
    ok;
v_msg_ConnectedMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ConnectedMessage'}, X,
        Path).

-compile({nowarn_unused_function,v_msg_DisconnectedMessage/3}).
-dialyzer({nowarn_function,v_msg_DisconnectedMessage/3}).
v_msg_DisconnectedMessage(#'DisconnectedMessage'{reason
= F1},
    Path, TrUserData) ->
    if F1 == undefined -> ok;
        true -> v_type_string(F1, [reason | Path], TrUserData)
    end,
    ok;
v_msg_DisconnectedMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DisconnectedMessage'}, X,
        Path).

-compile({nowarn_unused_function,v_msg_EmqxMessage/3}).
-dialyzer({nowarn_function,v_msg_EmqxMessage/3}).
v_msg_EmqxMessage(#'EmqxMessage'{username = F1,
    client_id = F2, topic = F3, qos = F4,
    retain = F5, dup = F6, id = F7, payload = F8},
    Path, TrUserData) ->
    if F1 == undefined -> ok;
        true -> v_type_string(F1, [username | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
        true ->
            v_type_string(F2, [client_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
        true -> v_type_string(F3, [topic | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
        true -> v_type_int32(F4, [qos | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
        true -> v_type_bool(F5, [retain | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
        true -> v_type_bool(F6, [dup | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
        true -> v_type_int32(F7, [id | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
        true -> v_type_bytes(F8, [payload | Path], TrUserData)
    end,
    ok;
v_msg_EmqxMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EmqxMessage'}, X, Path).

-compile({nowarn_unused_function,'v_enum_ConnectedMessage.ConnAck'/3}).
-dialyzer({nowarn_function,'v_enum_ConnectedMessage.ConnAck'/3}).
'v_enum_ConnectedMessage.ConnAck'('CONNACK_ACCEPT',
    _Path, _TrUserData) ->
    ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_PROTO_VER',
    _Path, _TrUserData) ->
    ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_INVALID_ID',
    _Path, _TrUserData) ->
    ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_SERVER',
    _Path, _TrUserData) ->
    ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_CREDENTIALS',
    _Path, _TrUserData) ->
    ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_AUTH', _Path,
    _TrUserData) ->
    ok;
'v_enum_ConnectedMessage.ConnAck'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ConnectedMessage.ConnAck'(X, Path,
    _TrUserData) ->
    mk_type_error({invalid_enum,
        'ConnectedMessage.ConnAck'},
        X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
        N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
        Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
        N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
        Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
    N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
        N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
        Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
        {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
        lists:map(fun atom_to_list/1,
            lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'ConnectedMessage.ConnAck'},
        [{'CONNACK_ACCEPT', 0}, {'CONNACK_PROTO_VER', 1},
            {'CONNACK_INVALID_ID', 2}, {'CONNACK_SERVER', 3},
            {'CONNACK_CREDENTIALS', 4}, {'CONNACK_AUTH', 5}]},
        {{msg, 'EmqxPresence'},
            [#field{name = username, fnum = 1, rnum = 2,
                type = string, occurrence = optional, opts = []},
                #field{name = client_id, fnum = 2, rnum = 3,
                    type = string, occurrence = optional, opts = []},
                #field{name = time, fnum = 3, rnum = 4, type = int64,
                    occurrence = optional, opts = []},
                #gpb_oneof{name = presence, rnum = 5,
                    fields =
                    [#field{name = connected_message, fnum = 4, rnum = 5,
                        type = {msg, 'ConnectedMessage'},
                        occurrence = optional, opts = []},
                        #field{name = disconnected_message, fnum = 5, rnum = 5,
                            type = {msg, 'DisconnectedMessage'},
                            occurrence = optional, opts = []}]}]},
        {{msg, 'ConnectedMessage'},
            [#field{name = ip_address, fnum = 1, rnum = 2,
                type = string, occurrence = optional, opts = []},
                #field{name = conn_ack, fnum = 2, rnum = 3,
                    type = {enum, 'ConnectedMessage.ConnAck'},
                    occurrence = optional, opts = []},
                #field{name = session, fnum = 3, rnum = 4, type = bool,
                    occurrence = optional, opts = []},
                #field{name = protocol_version, fnum = 4, rnum = 5,
                    type = int32, occurrence = optional, opts = []}]},
        {{msg, 'DisconnectedMessage'},
            [#field{name = reason, fnum = 1, rnum = 2,
                type = string, occurrence = optional, opts = []}]},
        {{msg, 'EmqxMessage'},
            [#field{name = username, fnum = 1, rnum = 2,
                type = string, occurrence = optional, opts = []},
                #field{name = client_id, fnum = 2, rnum = 3,
                    type = string, occurrence = optional, opts = []},
                #field{name = topic, fnum = 3, rnum = 4, type = string,
                    occurrence = optional, opts = []},
                #field{name = qos, fnum = 4, rnum = 5, type = int32,
                    occurrence = optional, opts = []},
                #field{name = retain, fnum = 5, rnum = 6, type = bool,
                    occurrence = optional, opts = []},
                #field{name = dup, fnum = 6, rnum = 7, type = bool,
                    occurrence = optional, opts = []},
                #field{name = id, fnum = 7, rnum = 8, type = int32,
                    occurrence = optional, opts = []},
                #field{name = payload, fnum = 8, rnum = 9, type = bytes,
                    occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['EmqxPresence', 'ConnectedMessage',
        'DisconnectedMessage', 'EmqxMessage'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['EmqxPresence', 'ConnectedMessage',
        'DisconnectedMessage', 'EmqxMessage'].


get_enum_names() -> ['ConnectedMessage.ConnAck'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('EmqxPresence') ->
    [#field{name = username, fnum = 1, rnum = 2,
        type = string, occurrence = optional, opts = []},
        #field{name = client_id, fnum = 2, rnum = 3,
            type = string, occurrence = optional, opts = []},
        #field{name = time, fnum = 3, rnum = 4, type = int64,
            occurrence = optional, opts = []},
        #gpb_oneof{name = presence, rnum = 5,
            fields =
            [#field{name = connected_message, fnum = 4, rnum = 5,
                type = {msg, 'ConnectedMessage'},
                occurrence = optional, opts = []},
                #field{name = disconnected_message, fnum = 5, rnum = 5,
                    type = {msg, 'DisconnectedMessage'},
                    occurrence = optional, opts = []}]}];
find_msg_def('ConnectedMessage') ->
    [#field{name = ip_address, fnum = 1, rnum = 2,
        type = string, occurrence = optional, opts = []},
        #field{name = conn_ack, fnum = 2, rnum = 3,
            type = {enum, 'ConnectedMessage.ConnAck'},
            occurrence = optional, opts = []},
        #field{name = session, fnum = 3, rnum = 4, type = bool,
            occurrence = optional, opts = []},
        #field{name = protocol_version, fnum = 4, rnum = 5,
            type = int32, occurrence = optional, opts = []}];
find_msg_def('DisconnectedMessage') ->
    [#field{name = reason, fnum = 1, rnum = 2,
        type = string, occurrence = optional, opts = []}];
find_msg_def('EmqxMessage') ->
    [#field{name = username, fnum = 1, rnum = 2,
        type = string, occurrence = optional, opts = []},
        #field{name = client_id, fnum = 2, rnum = 3,
            type = string, occurrence = optional, opts = []},
        #field{name = topic, fnum = 3, rnum = 4, type = string,
            occurrence = optional, opts = []},
        #field{name = qos, fnum = 4, rnum = 5, type = int32,
            occurrence = optional, opts = []},
        #field{name = retain, fnum = 5, rnum = 6, type = bool,
            occurrence = optional, opts = []},
        #field{name = dup, fnum = 6, rnum = 7, type = bool,
            occurrence = optional, opts = []},
        #field{name = id, fnum = 7, rnum = 8, type = int32,
            occurrence = optional, opts = []},
        #field{name = payload, fnum = 8, rnum = 9, type = bytes,
            occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('ConnectedMessage.ConnAck') ->
    [{'CONNACK_ACCEPT', 0}, {'CONNACK_PROTO_VER', 1},
        {'CONNACK_INVALID_ID', 2}, {'CONNACK_SERVER', 3},
        {'CONNACK_CREDENTIALS', 4}, {'CONNACK_AUTH', 5}];
find_enum_def(_) -> error.


enum_symbol_by_value('ConnectedMessage.ConnAck',
    Value) ->
    'enum_symbol_by_value_ConnectedMessage.ConnAck'(Value).


enum_value_by_symbol('ConnectedMessage.ConnAck', Sym) ->
    'enum_value_by_symbol_ConnectedMessage.ConnAck'(Sym).


'enum_symbol_by_value_ConnectedMessage.ConnAck'(0) ->
    'CONNACK_ACCEPT';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(1) ->
    'CONNACK_PROTO_VER';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(2) ->
    'CONNACK_INVALID_ID';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(3) ->
    'CONNACK_SERVER';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(4) ->
    'CONNACK_CREDENTIALS';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(5) ->
    'CONNACK_AUTH';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(_) -> % workaround for unknown code
    'CONNACK_INVALID_ID'.


'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_ACCEPT') ->
    0;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_PROTO_VER') ->
    1;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_INVALID_ID') ->
    2;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_SERVER') ->
    3;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_CREDENTIALS') ->
    4;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_AUTH') ->
    5.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"io.emqx.EmqxPresence">>) -> 'EmqxPresence';
fqbin_to_msg_name(<<"io.emqx.ConnectedMessage">>) -> 'ConnectedMessage';
fqbin_to_msg_name(<<"io.emqx.DisconnectedMessage">>) -> 'DisconnectedMessage';
fqbin_to_msg_name(<<"io.emqx.EmqxMessage">>) -> 'EmqxMessage';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('EmqxPresence') -> <<"io.emqx.EmqxPresence">>;
msg_name_to_fqbin('ConnectedMessage') -> <<"io.emqx.ConnectedMessage">>;
msg_name_to_fqbin('DisconnectedMessage') -> <<"io.emqx.DisconnectedMessage">>;
msg_name_to_fqbin('EmqxMessage') -> <<"io.emqx.EmqxMessage">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"io.emqx.ConnectedMessage.ConnAck">>) ->
    'ConnectedMessage.ConnAck';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('ConnectedMessage.ConnAck') ->
    <<"io.emqx.ConnectedMessage.ConnAck">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'io.emqx'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "emqx_gpb.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["emqx_gpb.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["emqx_gpb"].


get_msg_containment("emqx_gpb") ->
    ['ConnectedMessage', 'DisconnectedMessage',
        'EmqxMessage', 'EmqxPresence'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("emqx_gpb") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("emqx_gpb") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("emqx_gpb") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("emqx_gpb") ->
    ['ConnectedMessage.ConnAck'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"io.emqx.EmqxPresence">>) -> "emqx_gpb";
get_proto_by_msg_name_as_fqbin(<<"io.emqx.EmqxMessage">>) -> "emqx_gpb";
get_proto_by_msg_name_as_fqbin(<<"io.emqx.DisconnectedMessage">>) -> "emqx_gpb";
get_proto_by_msg_name_as_fqbin(<<"io.emqx.ConnectedMessage">>) -> "emqx_gpb";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"io.emqx.ConnectedMessage.ConnAck">>) -> "emqx_gpb";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.10.0".

gpb_version_as_list() ->
    [4,10,0].
